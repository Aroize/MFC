import java.nio.file.Files

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdk 30

    defaultConfig {
        applicationId "ru.aroize.mfc"
        minSdk 24
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // Android Core
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'

    // Dagger2
    implementation 'com.google.dagger:dagger:2.38.1'
    kapt 'com.google.dagger:dagger-compiler:2.38.1'

    // MVVM
    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.3.6"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.retrofit2:adapter-rxjava:2.3.0"

    // GSON
    implementation "com.google.code.gson:gson:2.8.8"

    // RxJava
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation "io.reactivex.rxjava3:rxjava:3.0.3"

    //Cicerone
    implementation "com.github.terrakok:cicerone:7.1"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

tasks.register("moveGitHooks") {
    var preCommit = new File(getRootDir(), "/tools/pre-commit")
    var destination = new File(getRootDir(), "/.git/hooks/pre-commit")
    if (!destination.exists()) {
        Files.copy(preCommit.toPath(), destination.toPath())
    }
    if (!destination.canExecute()) {
        destination.setExecutable(true)
    }

    var prepareCommit = new File(getRootDir(), "/tools/prepare-commit-msg")
    destination = new File(getRootDir(), "/.git/hooks/prepare-commit-msg")

    if (!destination.exists()) {
        Files.copy(prepareCommit.toPath(), destination.toPath())
    }
    if (!destination.canExecute()) {
        destination.setExecutable(true)
    }
}
build.dependsOn moveGitHooks